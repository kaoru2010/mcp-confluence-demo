import TurndownService from "turndown";
import { marked } from "marked";
import * as cheerio from "cheerio";

/**
 * ConfluenceのStorage FormatとMarkdownの相互変換
 */
export class MarkdownConverter {
  private turndownService: TurndownService;

  constructor() {
    this.turndownService = new TurndownService({
      headingStyle: "atx", // # スタイルのヘッディング
      codeBlockStyle: "fenced", // ```スタイルのコードブロック
      bulletListMarker: "-", // - でリスト
      emDelimiter: "*", // *italic*
      strongDelimiter: "**", // **bold**
    });

    // Confluenceの特殊な要素のカスタムルールを追加
    this.addConfluenceRules();
  }

  /**
   * Confluenceの特殊な要素に対するカスタムルールを追加
   */
  private addConfluenceRules(): void {
    // Confluenceのマクロは警告コメントとして変換
    this.turndownService.addRule("confluenceMacro", {
      filter: (node) => {
        return (
          node.nodeName === "AC:STRUCTURED-MACRO" ||
          node.nodeName === "AC:MACRO"
        );
      },
      replacement: (content, node) => {
        const element = node as unknown as {
          getAttribute?: (name: string) => string | null;
        };
        const macroName = element.getAttribute?.("ac:name") || "unknown";
        return `\n<!-- Confluence Macro: ${macroName} (not fully supported) -->\n${content}\n`;
      },
    });

    // Confluenceのリンク（ri:page）
    this.turndownService.addRule("confluencePageLink", {
      filter: (node) => {
        return (
          node.nodeName === "AC:LINK" &&
          node.querySelector("ri\\:page") !== null
        );
      },
      replacement: (content) => {
        return `[${content}](#confluence-page-link)`;
      },
    });

    // 空のテーブルセルも保持
    this.turndownService.addRule("emptyTableCell", {
      filter: ["td", "th"],
      replacement: (content, node) => {
        const cellContent = content.trim() || " ";
        return node.nodeName === "TH"
          ? ` ${cellContent} |`
          : ` ${cellContent} |`;
      },
    });
  }

  /**
   * Confluence Storage Format (XHTML) → Markdown
   */
  toMarkdown(storageFormat: string): string {
    try {
      // cheerioでHTMLをクリーンアップ
      const $ = cheerio.load(storageFormat, {
        xml: false,
      });

      // body部分のHTMLを取得（存在しない場合は全体を使用）
      const html = $("body").html() || storageFormat;

      // Markdownに変換
      const markdown = this.turndownService.turndown(html);

      // 余分な空行を整理
      return this.cleanupMarkdown(markdown);
    } catch (error) {
      throw new Error(
        `Failed to convert to Markdown: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  /**
   * Markdown → Confluence Storage Format (XHTML)
   */
  toStorageFormat(markdown: string): string {
    try {
      // MarkedでMarkdownをHTMLに変換
      const html = marked.parse(markdown, {
        async: false,
        gfm: true, // GitHub Flavored Markdown
        breaks: false, // 改行を<br>に変換しない
      }) as string;

      // ConfluenceのStorage Format用に調整
      return this.adjustForConfluence(html);
    } catch (error) {
      throw new Error(
        `Failed to convert from Markdown: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  /**
   * Markdownをクリーンアップ
   */
  private cleanupMarkdown(markdown: string): string {
    return (
      `${markdown
        // 3行以上の連続した空行を2行に
        .replace(/\n{4,}/g, "\n\n\n")
        // 末尾の空白を削除
        .replace(/[ \t]+$/gm, "")
        // 最後に改行を1つ追加
        .trim()}\n`
    );
  }

  /**
   * HTMLをConfluenceのStorage Format用に調整
   */
  private adjustForConfluence(html: string): string {
    const $ = cheerio.load(html, {
      xml: false,
    });

    // Confluenceは一部のHTML要素をそのまま受け入れるが、調整が必要
    // 例: <p>タグは必須、<div>は避ける、など

    // bodyの中身だけを取得（markedが生成したHTMLをそのまま使用）
    let result = $.html();

    // 余分な<html><body>タグを削除
    result = result
      .replace(/^<html><head><\/head><body>/, "")
      .replace(/<\/body><\/html>$/, "");

    // Confluenceが受け入れやすいように調整
    // コードブロックの言語指定を調整（必要に応じて）
    result = result.replace(
      /<pre><code class="language-(\w+)">/g,
      '<ac:structured-macro ac:name="code"><ac:parameter ac:name="language">$1</ac:parameter><ac:plain-text-body><![CDATA[',
    );
    result = result.replace(
      /<\/code><\/pre>/g,
      "]]></ac:plain-text-body></ac:structured-macro>",
    );

    return result.trim();
  }

  /**
   * Confluence Storage Formatの自動生成部分をMarkdownに変換
   */
  convertAutoGeneratedToMarkdown(storageFormat: string): string {
    // 自動生成部分だけを抽出してMarkdownに変換
    // DomAutoGeneratedHandlerと組み合わせて使用することを想定
    return this.toMarkdown(storageFormat);
  }

  /**
   * MarkdownをConfluence Storage Formatの自動生成部分に変換
   */
  convertMarkdownToAutoGenerated(markdown: string): string {
    // Markdownを自動生成セクション用のStorage Formatに変換
    return this.toStorageFormat(markdown);
  }
}

// シングルトンインスタンスをエクスポート
export const markdownConverter = new MarkdownConverter();
