import type { AxiosInstance } from "axios";
import axios from "axios";
import {
  AuthenticationError,
  AuthorizationError,
  ExternalServiceError,
  InvalidUrlError,
  PageNotFoundError,
  RateLimitError,
} from "./errors.js";
import { Logger, logger } from "./logger.js";
import type {
  ConfluenceConfig,
  ConfluencePage,
  PageUpdateRequest,
} from "./types.js";

export class ConfluenceClient {
  private api: AxiosInstance;

  constructor(config: ConfluenceConfig) {
    this.api = axios.create({
      baseURL: `${config.baseUrl}/wiki/rest/api`,
      auth: {
        username: config.email,
        password: config.apiToken,
      },
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    });
  }

  /**
   * ページIDからページ情報を取得
   */
  async getPage(pageId: string): Promise<ConfluencePage> {
    const startTime = Date.now();
    const url = `/content/${pageId}`;

    logger.debug({
      event: "confluence_api_call",
      status: "started",
      method: "GET",
      target: `page/${pageId}`,
    });

    try {
      const response = await this.api.get(url, {
        params: {
          expand: "body.storage,version",
        },
      });

      const durationMs = Date.now() - startTime;
      logger.info({
        event: "confluence_api_call",
        status: "completed",
        durationMs,
        method: "GET",
        target: `page/${pageId}`,
        statusCode: response.status,
      });

      return response.data;
    } catch (error) {
      const durationMs = Date.now() - startTime;

      if (axios.isAxiosError(error)) {
        const status = error.response?.status || 0;

        // Classify error by status code
        let domainError: Error;
        switch (status) {
          case 401:
            domainError = new AuthenticationError(
              "Invalid credentials or token",
              error,
            );
            break;
          case 403:
            domainError = new AuthorizationError(
              `page/${pageId}`,
              "Insufficient permissions",
            );
            break;
          case 404:
            domainError = new PageNotFoundError(pageId);
            break;
          case 429:
            domainError = new RateLimitError("confluence");
            break;
          case 500:
          case 502:
          case 503:
            domainError = new ExternalServiceError(
              "confluence",
              `Server error: ${status}`,
              error,
            );
            break;
          default:
            domainError = new ExternalServiceError(
              "confluence",
              `Failed to get page ${pageId}: ${status} ${error.response?.statusText || error.message}`,
              error,
            );
        }

        // Log at debug level - will be handled by caller
        logger.debug({
          event: "confluence_api_call",
          status: "failed",
          durationMs,
          method: "GET",
          target: `page/${pageId}`,
          statusCode: status,
          error: Logger.serializeError(domainError),
        });

        throw domainError;
      }

      // Non-Axios error
      const unknownError = new ExternalServiceError(
        "confluence",
        `Unexpected error while getting page ${pageId}`,
        error,
      );

      logger.debug({
        event: "confluence_api_call",
        status: "failed",
        durationMs,
        method: "GET",
        target: `page/${pageId}`,
        error: Logger.serializeError(unknownError),
      });

      throw unknownError;
    }
  }

  /**
   * ページを更新
   */
  async updatePage(
    pageId: string,
    title: string,
    content: string,
    version: number,
  ): Promise<ConfluencePage> {
    const startTime = Date.now();
    const url = `/content/${pageId}`;

    logger.debug({
      event: "confluence_api_call",
      status: "started",
      method: "PUT",
      target: `page/${pageId}`,
      version,
    });

    const updateRequest: PageUpdateRequest = {
      id: pageId,
      type: "page",
      title,
      body: {
        storage: {
          value: content,
          representation: "storage",
        },
      },
      version: {
        number: version + 1,
        message: "auto-generated by mcp-confluence-demo",
      },
    };

    try {
      const response = await this.api.put(url, updateRequest);

      const durationMs = Date.now() - startTime;
      logger.info({
        event: "confluence_api_call",
        status: "completed",
        durationMs,
        method: "PUT",
        target: `page/${pageId}`,
        statusCode: response.status,
        newVersion: version + 1,
      });

      return response.data;
    } catch (error) {
      const durationMs = Date.now() - startTime;

      if (axios.isAxiosError(error)) {
        const status = error.response?.status || 0;

        // Classify error by status code
        let domainError: Error;
        switch (status) {
          case 401:
            domainError = new AuthenticationError(
              "Invalid credentials or token",
              error,
            );
            break;
          case 403:
            domainError = new AuthorizationError(
              `page/${pageId}`,
              "Insufficient permissions to update",
            );
            break;
          case 404:
            domainError = new PageNotFoundError(pageId);
            break;
          case 409:
            domainError = new ExternalServiceError(
              "confluence",
              `Version conflict: page ${pageId} was modified`,
              error,
            );
            break;
          case 429:
            domainError = new RateLimitError("confluence");
            break;
          case 500:
          case 502:
          case 503:
            domainError = new ExternalServiceError(
              "confluence",
              `Server error: ${status}`,
              error,
            );
            break;
          default:
            domainError = new ExternalServiceError(
              "confluence",
              `Failed to update page ${pageId}: ${status} ${error.response?.statusText || error.message}`,
              error,
            );
        }

        // Log at debug level - will be handled by caller
        logger.debug({
          event: "confluence_api_call",
          status: "failed",
          durationMs,
          method: "PUT",
          target: `page/${pageId}`,
          statusCode: status,
          error: Logger.serializeError(domainError),
        });

        throw domainError;
      }

      // Non-Axios error
      const unknownError = new ExternalServiceError(
        "confluence",
        `Unexpected error while updating page ${pageId}`,
        error,
      );

      logger.debug({
        event: "confluence_api_call",
        status: "failed",
        durationMs,
        method: "PUT",
        target: `page/${pageId}`,
        error: Logger.serializeError(unknownError),
      });

      throw unknownError;
    }
  }

  /**
   * URLからページIDを抽出
   */
  static extractPageIdFromUrl(url: string): string {
    const match = url.match(/\/pages\/(\d+)\//);
    if (!match || !match[1]) {
      throw new InvalidUrlError(url, "Cannot extract page ID from URL");
    }
    return match[1];
  }
}
