import axios from "axios";
import type { AxiosInstance } from "axios";
import type { ConfluenceConfig, ConfluencePage, PageUpdateRequest } from "./types.js";

export class ConfluenceClient {
  private api: AxiosInstance;
  private config: ConfluenceConfig;

  constructor(config: ConfluenceConfig) {
    this.config = config;
    this.api = axios.create({
      baseURL: `${config.baseUrl}/wiki/rest/api`,
      auth: {
        username: config.email,
        password: config.apiToken,
      },
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    });
  }

  /**
   * ページIDからページ情報を取得
   */
  async getPage(pageId: string): Promise<ConfluencePage> {
    try {
      const response = await this.api.get(`/content/${pageId}`, {
        params: {
          expand: "body.storage,version",
        },
      });
      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        throw new Error(
          `Failed to get page ${pageId}: ${error.response?.status} ${error.response?.statusText}`,
        );
      }
      throw error;
    }
  }

  /**
   * ページを更新
   */
  async updatePage(
    pageId: string,
    title: string,
    content: string,
    version: number,
  ): Promise<ConfluencePage> {
    const updateRequest: PageUpdateRequest = {
      id: pageId,
      type: "page",
      title,
      body: {
        storage: {
          value: content,
          representation: "storage",
        },
      },
      version: {
        number: version + 1,
        message: "auto-generated by mcp-confluence-demo",
      },
    };

    try {
      const response = await this.api.put(`/content/${pageId}`, updateRequest);
      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        throw new Error(
          `Failed to update page ${pageId}: ${error.response?.status} ${error.response?.statusText}`,
        );
      }
      throw error;
    }
  }

  /**
   * URLからページIDを抽出
   */
  static extractPageIdFromUrl(url: string): string {
    const match = url.match(/\/pages\/(\d+)\//);
    if (!match || !match[1]) {
      throw new Error(`Cannot extract page ID from URL: ${url}`);
    }
    return match[1];
  }
}
