#!/usr/bin/env node

import fs from "node:fs";
import path from "node:path";
import { Command } from "commander";
import dotenv from "dotenv";
import { ConfluenceClient } from "./confluence-client.js";
import { DomAutoGeneratedHandler } from "./dom-auto-generated-handler.js";
import { markdownConverter } from "./markdown-converter.js";
import type { ConfluenceConfig } from "./types.js";

// 環境変数を読み込み
dotenv.config();

const program = new Command();

program
  .name("confluence-cli")
  .description("CLI tool for reading and updating Confluence pages")
  .version("1.0.0");

/**
 * 設定を作成
 */
function createConfig(url: string, email?: string): ConfluenceConfig {
  const apiToken = process.env.CONFLUENCE_API_TOKEN;
  if (!apiToken) {
    throw new Error("CONFLUENCE_API_TOKEN environment variable is required");
  }

  if (!email) {
    throw new Error(
      "Email is required. Set CONFLUENCE_EMAIL environment variable or use --email option",
    );
  }

  // URLからベースURLを抽出
  const urlObj = new URL(url);
  const baseUrl = `${urlObj.protocol}//${urlObj.hostname}`;

  return {
    baseUrl,
    email,
    apiToken,
  };
}

/**
 * read コマンド: ページの自動生成部分を読み取り
 */
program
  .command("read")
  .description("Read auto-generated section from Confluence page")
  .argument("<url>", "Confluence page URL")
  .option("-e, --email <email>", "User email for authentication")
  .action(async (url: string, options) => {
    try {
      const email = options.email || process.env.CONFLUENCE_EMAIL;
      const config = createConfig(url, email);
      const client = new ConfluenceClient(config);

      const pageId = ConfluenceClient.extractPageIdFromUrl(url);
      console.log(`Reading page ID: ${pageId}`);

      const page = await client.getPage(pageId);
      console.log(`Page title: ${page.title}`);

      const content = page.body.storage.value;
      const hasMarkers =
        DomAutoGeneratedHandler.hasAutoGeneratedMarkers(content);

      if (!hasMarkers) {
        console.log("No auto-generated markers found in the page.");
        return;
      }

      const autoGeneratedContent =
        DomAutoGeneratedHandler.getAutoGeneratedContent(content);
      console.log("\\nAuto-generated content:");
      console.log("=".repeat(50));
      console.log(autoGeneratedContent);
      console.log("=".repeat(50));
    } catch (error) {
      console.error("Error:", error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

/**
 * update コマンド: 自動生成部分を更新
 */
program
  .command("update")
  .description("Update auto-generated section in Confluence page")
  .argument("<url>", "Confluence page URL")
  .argument("<content>", "New content for auto-generated section")
  .option("-e, --email <email>", "User email for authentication")
  .action(async (url: string, newContent: string, options) => {
    try {
      const email = options.email || process.env.CONFLUENCE_EMAIL;
      const config = createConfig(url, email);
      const client = new ConfluenceClient(config);

      const pageId = ConfluenceClient.extractPageIdFromUrl(url);
      console.log(`Updating page ID: ${pageId}`);

      // 現在のページを取得
      const page = await client.getPage(pageId);
      console.log(`Page title: ${page.title}`);

      const originalContent = page.body.storage.value;
      const updatedContent =
        DomAutoGeneratedHandler.replaceAutoGeneratedSection(
          originalContent,
          newContent,
        );

      // ページを更新
      const updatedPage = await client.updatePage(
        pageId,
        page.title,
        updatedContent,
        page.version.number,
      );

      console.log(
        `Successfully updated page. New version: ${updatedPage.version.number}`,
      );
      console.log("Updated auto-generated content:");
      console.log("=".repeat(50));
      console.log(newContent);
      console.log("=".repeat(50));
    } catch (error) {
      console.error("Error:", error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

/**
 * info コマンド: ページ情報を表示
 */
program
  .command("info")
  .description("Show page information")
  .argument("<url>", "Confluence page URL")
  .option("-e, --email <email>", "User email for authentication")
  .action(async (url: string, options) => {
    try {
      const email = options.email || process.env.CONFLUENCE_EMAIL;
      const config = createConfig(url, email);
      const client = new ConfluenceClient(config);

      const pageId = ConfluenceClient.extractPageIdFromUrl(url);
      const page = await client.getPage(pageId);

      console.log("Page Information:");
      console.log(`  ID: ${page.id}`);
      console.log(`  Title: ${page.title}`);
      console.log(`  Version: ${page.version.number}`);
      console.log(
        `  Has auto-generated markers: ${DomAutoGeneratedHandler.hasAutoGeneratedMarkers(page.body.storage.value)}`,
      );
    } catch (error) {
      console.error("Error:", error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

/**
 * export-md コマンド: ページの自動生成部分をMarkdownファイルにエクスポート
 */
program
  .command("export-md")
  .description(
    "Export auto-generated section from Confluence page to Markdown file",
  )
  .argument("<url>", "Confluence page URL")
  .requiredOption("-f, --file <path>", "Output Markdown file path")
  .option("-e, --email <email>", "User email for authentication")
  .option("--force", "Overwrite existing file")
  .action(async (url: string, options) => {
    try {
      const email = options.email || process.env.CONFLUENCE_EMAIL;
      const config = createConfig(url, email);
      const client = new ConfluenceClient(config);

      const pageId = ConfluenceClient.extractPageIdFromUrl(url);
      console.log(`Reading page ID: ${pageId}`);

      const page = await client.getPage(pageId);
      console.log(`Page title: ${page.title}`);

      const content = page.body.storage.value;
      const hasMarkers =
        DomAutoGeneratedHandler.hasAutoGeneratedMarkers(content);

      if (!hasMarkers) {
        console.error("Error: No auto-generated markers found in the page.");
        process.exit(1);
      }

      const autoGeneratedContent =
        DomAutoGeneratedHandler.getAutoGeneratedContent(content);

      // Storage FormatをMarkdownに変換
      const markdown = markdownConverter.toMarkdown(autoGeneratedContent);

      // ファイルパスの処理
      const filePath = path.resolve(options.file);
      const fileDir = path.dirname(filePath);

      // ファイルが存在する場合のチェック
      if (fs.existsSync(filePath) && !options.force) {
        console.error(`Error: File already exists: ${filePath}`);
        console.error("Use --force to overwrite.");
        process.exit(1);
      }

      // ディレクトリが存在しない場合は作成
      if (!fs.existsSync(fileDir)) {
        console.log(`Creating directory: ${fileDir}`);
        fs.mkdirSync(fileDir, { recursive: true });
      }

      // ファイルに書き込み
      fs.writeFileSync(filePath, markdown, "utf-8");

      console.log(`\n✅ Successfully exported to: ${filePath}`);
      console.log(`   Page: ${page.title}`);
      console.log(`   Size: ${markdown.length} bytes`);
    } catch (error) {
      console.error("Error:", error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

/**
 * import-md コマンド: MarkdownファイルからConfluenceページの自動生成部分を更新
 */
program
  .command("import-md")
  .description(
    "Import Markdown file to update auto-generated section in Confluence page",
  )
  .argument("<url>", "Confluence page URL")
  .requiredOption("-f, --file <path>", "Input Markdown file path")
  .option("-e, --email <email>", "User email for authentication")
  .action(async (url: string, options) => {
    try {
      const email = options.email || process.env.CONFLUENCE_EMAIL;
      const config = createConfig(url, email);
      const client = new ConfluenceClient(config);

      const pageId = ConfluenceClient.extractPageIdFromUrl(url);

      // ファイルパスの処理
      const filePath = path.resolve(options.file);

      // ファイルが存在するかチェック
      if (!fs.existsSync(filePath)) {
        console.error(`Error: File not found: ${filePath}`);
        process.exit(1);
      }

      // Markdownファイルを読み込み
      const markdown = fs.readFileSync(filePath, "utf-8");
      console.log(`Reading Markdown from: ${filePath}`);
      console.log(`Size: ${markdown.length} bytes`);

      console.log(`\nUpdating page ID: ${pageId}`);

      // 現在のページを取得
      const page = await client.getPage(pageId);
      console.log(`Page title: ${page.title}`);

      // MarkdownをStorage Formatに変換
      const storageContent = markdownConverter.toStorageFormat(markdown);

      const originalContent = page.body.storage.value;
      const updatedContent =
        DomAutoGeneratedHandler.replaceAutoGeneratedSection(
          originalContent,
          storageContent,
        );

      // ページを更新
      const updatedPage = await client.updatePage(
        pageId,
        page.title,
        updatedContent,
        page.version.number,
      );

      console.log(
        `\n✅ Successfully updated page. New version: ${updatedPage.version.number}`,
      );
      console.log(`   Page: ${page.title}`);
      console.log(`   Content length: ${markdown.length} bytes`);
    } catch (error) {
      console.error("Error:", error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

program.parse();
