#!/usr/bin/env node

import { Command } from "commander";
import dotenv from "dotenv";
import { ConfluenceClient } from "./confluence-client.js";
import { DomAutoGeneratedHandler } from "./dom-auto-generated-handler.js";
import type { ConfluenceConfig } from "./types.js";

// 環境変数を読み込み
dotenv.config();

const program = new Command();

program
  .name("confluence-cli")
  .description("CLI tool for reading and updating Confluence pages")
  .version("1.0.0");

/**
 * 設定を作成
 */
function createConfig(url: string, email?: string): ConfluenceConfig {
  const apiToken = process.env.CONFLUENCE_API_TOKEN;
  if (!apiToken) {
    throw new Error("CONFLUENCE_API_TOKEN environment variable is required");
  }

  if (!email) {
    throw new Error(
      "Email is required. Set CONFLUENCE_EMAIL environment variable or use --email option",
    );
  }

  // URLからベースURLを抽出
  const urlObj = new URL(url);
  const baseUrl = `${urlObj.protocol}//${urlObj.hostname}`;

  return {
    baseUrl,
    email,
    apiToken,
  };
}

/**
 * read コマンド: ページの自動生成部分を読み取り
 */
program
  .command("read")
  .description("Read auto-generated section from Confluence page")
  .argument("<url>", "Confluence page URL")
  .option("-e, --email <email>", "User email for authentication")
  .action(async (url: string, options) => {
    try {
      const email = options.email || process.env.CONFLUENCE_EMAIL;
      const config = createConfig(url, email);
      const client = new ConfluenceClient(config);

      const pageId = ConfluenceClient.extractPageIdFromUrl(url);
      console.log(`Reading page ID: ${pageId}`);

      const page = await client.getPage(pageId);
      console.log(`Page title: ${page.title}`);

      const content = page.body.storage.value;
      const hasMarkers =
        DomAutoGeneratedHandler.hasAutoGeneratedMarkers(content);

      if (!hasMarkers) {
        console.log("No auto-generated markers found in the page.");
        return;
      }

      const autoGeneratedContent =
        DomAutoGeneratedHandler.getAutoGeneratedContent(content);
      console.log("\\nAuto-generated content:");
      console.log("=".repeat(50));
      console.log(autoGeneratedContent);
      console.log("=".repeat(50));
    } catch (error) {
      console.error("Error:", error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

/**
 * update コマンド: 自動生成部分を更新
 */
program
  .command("update")
  .description("Update auto-generated section in Confluence page")
  .argument("<url>", "Confluence page URL")
  .argument("<content>", "New content for auto-generated section")
  .option("-e, --email <email>", "User email for authentication")
  .action(async (url: string, newContent: string, options) => {
    try {
      const email = options.email || process.env.CONFLUENCE_EMAIL;
      const config = createConfig(url, email);
      const client = new ConfluenceClient(config);

      const pageId = ConfluenceClient.extractPageIdFromUrl(url);
      console.log(`Updating page ID: ${pageId}`);

      // 現在のページを取得
      const page = await client.getPage(pageId);
      console.log(`Page title: ${page.title}`);

      const originalContent = page.body.storage.value;
      const updatedContent =
        DomAutoGeneratedHandler.replaceAutoGeneratedSection(
          originalContent,
          newContent,
        );

      // ページを更新
      const updatedPage = await client.updatePage(
        pageId,
        page.title,
        updatedContent,
        page.version.number,
      );

      console.log(
        `Successfully updated page. New version: ${updatedPage.version.number}`,
      );
      console.log("Updated auto-generated content:");
      console.log("=".repeat(50));
      console.log(newContent);
      console.log("=".repeat(50));
    } catch (error) {
      console.error("Error:", error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

/**
 * info コマンド: ページ情報を表示
 */
program
  .command("info")
  .description("Show page information")
  .argument("<url>", "Confluence page URL")
  .option("-e, --email <email>", "User email for authentication")
  .action(async (url: string, options) => {
    try {
      const email = options.email || process.env.CONFLUENCE_EMAIL;
      const config = createConfig(url, email);
      const client = new ConfluenceClient(config);

      const pageId = ConfluenceClient.extractPageIdFromUrl(url);
      const page = await client.getPage(pageId);

      console.log("Page Information:");
      console.log(`  ID: ${page.id}`);
      console.log(`  Title: ${page.title}`);
      console.log(`  Version: ${page.version.number}`);
      console.log(
        `  Has auto-generated markers: ${DomAutoGeneratedHandler.hasAutoGeneratedMarkers(page.body.storage.value)}`,
      );
    } catch (error) {
      console.error("Error:", error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

program.parse();
