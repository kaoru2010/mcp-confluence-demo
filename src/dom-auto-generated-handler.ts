import * as cheerio from "cheerio";
import type { AutoGeneratedSection } from "./types.js";

const BEGIN_MARKER = "BEGIN_AUTO_GENERATED";
const END_MARKER = "END_AUTO_GENERATED";

export class DomAutoGeneratedHandler {
  /**
   * DOM操作でBEGIN_AUTO_GENERATED/END_AUTO_GENERATED部分を抽出
   */
  static extractAutoGeneratedSection(content: string): AutoGeneratedSection {
    try {
      const $ = cheerio.load(content, {
        xml: false, // HTMLモード
      });

      // BEGIN_AUTO_GENERATEDマーカーを探す
      const beginElement = DomAutoGeneratedHandler.findElementByText(
        $,
        BEGIN_MARKER,
      );
      const endElement = DomAutoGeneratedHandler.findElementByText(
        $,
        END_MARKER,
      );

      if (!beginElement || !endElement) {
        return {
          before: content,
          content: "",
          after: "",
          found: false,
        };
      }

      return DomAutoGeneratedHandler.extractContentBetweenElements(
        $,
        beginElement,
        endElement,
        content,
      );
    } catch (error) {
      console.error("Error in DOM parsing:", error);
      return {
        before: content,
        content: "",
        after: "",
        found: false,
      };
    }
  }

  /**
   * textContentでマーカーを含む要素を検索
   */
  private static findElementByText(
    $: cheerio.CheerioAPI,
    marker: string,
  ): cheerio.Cheerio<any> | null {
    let foundElement: cheerio.Cheerio<any> | null = null;

    // 全ての要素を走査
    $("*").each((_, element) => {
      const $element = $(element);
      const text = $element.text().trim();

      if (text === marker) {
        foundElement = $element;
        return false; // break
      }
    });

    return foundElement;
  }

  /**
   * 2つの要素間のコンテンツを抽出（改良版）
   */
  private static extractContentBetweenElements(
    $: cheerio.CheerioAPI,
    beginElement: cheerio.Cheerio<any>,
    endElement: cheerio.Cheerio<any>,
    originalContent: string,
  ): AutoGeneratedSection {
    let contentParts: string[] = [];
    let foundContent = false;

    // BEGIN要素の次の兄弟要素から開始
    let current = beginElement.next();

    while (current.length > 0 && !current.is(endElement)) {
      const htmlContent = $.html(current);
      if (htmlContent?.trim()) {
        // 空でない要素のみ追加
        contentParts.push(htmlContent);
        foundContent = true;
      }
      current = current.next();
    }

    if (!foundContent) {
      // 隣接要素が見つからない場合、親子関係をチェック
      contentParts = DomAutoGeneratedHandler.extractContentByTraversal(
        $,
        beginElement,
        endElement,
      );
    }

    const before = DomAutoGeneratedHandler.getContentBefore(
      $,
      beginElement,
      originalContent,
    );
    const after = DomAutoGeneratedHandler.getContentAfter(
      $,
      endElement,
      originalContent,
    );

    return {
      before,
      content: contentParts.join("").trim(),
      after,
      found: true,
    };
  }

  /**
   * DOM走査による内容抽出（フォールバック）
   */
  private static extractContentByTraversal(
    $: cheerio.CheerioAPI,
    beginElement: cheerio.Cheerio<any>,
    endElement: cheerio.Cheerio<any>,
  ): string[] {
    const contentParts: string[] = [];
    let capturing = false;

    $("*").each((_, element) => {
      const $element = $(element);

      if ($element.is(beginElement)) {
        capturing = true;
        return; // BEGIN要素自体はスキップ
      }

      if ($element.is(endElement)) {
        capturing = false;
        return false; // 終了
      }

      if (capturing) {
        const htmlContent = $.html($element);
        if (
          htmlContent?.trim() &&
          !DomAutoGeneratedHandler.isEmptyParagraph(htmlContent)
        ) {
          contentParts.push(htmlContent);
        }
      }
    });

    return contentParts;
  }

  /**
   * 空のpタグかどうかチェック
   */
  private static isEmptyParagraph(html: string): boolean {
    return /^<p>\s*<\/p>$/.test(html.trim());
  }

  /**
   * BEGIN要素より前のコンテンツを取得
   */
  private static getContentBefore(
    $: cheerio.CheerioAPI,
    _beginElement: cheerio.Cheerio<any>,
    originalContent: string,
  ): string {
    const clone = $.load(originalContent);
    let _found = false;

    clone("*").each((_, element) => {
      const $element = clone(element);
      if ($element.text().trim() === BEGIN_MARKER) {
        _found = true;
        // この要素以降を削除
        $element.nextAll().remove();
        $element.remove();
        return false;
      }
    });

    return clone.html() || originalContent;
  }

  /**
   * END要素以降のコンテンツを取得
   */
  private static getContentAfter(
    $: cheerio.CheerioAPI,
    _endElement: cheerio.Cheerio<any>,
    originalContent: string,
  ): string {
    const clone = $.load(originalContent);
    let found = false;

    clone("*").each((_, element) => {
      const $element = clone(element);
      if (!found && $element.text().trim() === END_MARKER) {
        found = true;
        // この要素より前を削除
        $element.prevAll().remove();
        return;
      }
      if (!found) {
        $element.remove();
      }
    });

    return clone.html() || "";
  }

  /**
   * 自動生成部分を新しいコンテンツで置き換え
   */
  static replaceAutoGeneratedSection(
    originalContent: string,
    newGeneratedContent: string,
  ): string {
    const section =
      DomAutoGeneratedHandler.extractAutoGeneratedSection(originalContent);

    if (!section.found) {
      // マーカーが見つからない場合は、末尾に追加
      return DomAutoGeneratedHandler.appendAutoGeneratedSection(
        originalContent,
        newGeneratedContent,
      );
    }

    // マーカー間の内容を置き換え
    return DomAutoGeneratedHandler.replaceContentBetweenMarkers(
      originalContent,
      newGeneratedContent,
    );
  }

  /**
   * マーカー間のコンテンツを置き換え
   */
  private static replaceContentBetweenMarkers(
    originalContent: string,
    newContent: string,
  ): string {
    try {
      const $ = cheerio.load(originalContent, {
        xml: false,
      });

      const beginElement = DomAutoGeneratedHandler.findElementByText(
        $,
        BEGIN_MARKER,
      );
      const endElement = DomAutoGeneratedHandler.findElementByText(
        $,
        END_MARKER,
      );

      if (!beginElement || !endElement) {
        return originalContent;
      }

      // BEGIN要素とEND要素の間のすべての要素を削除
      let current = beginElement.next();
      while (current.length > 0 && !current.is(endElement)) {
        const next = current.next();
        current.remove();
        current = next;
      }

      // 新しいコンテンツを挿入（pタグで囲む）
      beginElement.after(`<p>${newContent}</p>`);

      return $.html();
    } catch (error) {
      console.error("Error replacing content:", error);
      return originalContent;
    }
  }

  /**
   * 新しい自動生成セクションを追加
   */
  private static appendAutoGeneratedSection(
    originalContent: string,
    newContent: string,
  ): string {
    const $ = cheerio.load(originalContent, {
      xml: false,
    });

    // 末尾に追加
    $("body").append(`
      <p><strong>${BEGIN_MARKER}</strong></p>
      <p>${newContent}</p>
      <p><strong>${END_MARKER}</strong></p>
    `);

    return $.html();
  }

  /**
   * 自動生成部分のみを取得
   */
  static getAutoGeneratedContent(content: string): string {
    const section =
      DomAutoGeneratedHandler.extractAutoGeneratedSection(content);
    return section.content.trim();
  }

  /**
   * マーカーが存在するかチェック
   */
  static hasAutoGeneratedMarkers(content: string): boolean {
    try {
      const $ = cheerio.load(content, {
        xml: false,
      });

      const beginElement = DomAutoGeneratedHandler.findElementByText(
        $,
        BEGIN_MARKER,
      );
      const endElement = DomAutoGeneratedHandler.findElementByText(
        $,
        END_MARKER,
      );

      return beginElement !== null && endElement !== null;
    } catch (_error) {
      return false;
    }
  }

  /**
   * マーカーを含む自動生成セクションを作成
   */
  static createAutoGeneratedSection(content: string): string {
    return `<p><strong>${BEGIN_MARKER}</strong></p>
<p>${content}</p>
<p><strong>${END_MARKER}</strong></p>`;
  }
}
